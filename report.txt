MicaFlow Application Page & Data Overview

Pages & Routes
1. /dashboard (Dashboard)
   Purpose: High-level KPIs and quick actions (links to all major functional pages). Planned charts: yield trend, loss trend, raw vs finished throughput, inventory at-a-glance.
   Data Sources: daily_stats (aggregated per date), inventory (current stocks), production (recent batches), purchases (recent raw material), categories/subProducts (structural metadata), suppliers, buyers.
   Cross-links: Buttons to /daily-processing, /raw-material-purchase, /inventory, /daily-analytics, /order-sheet, /management.

2. /raw-material-purchase (RawMaterialPurchase)
   Purpose: Record inbound raw material purchases.
   Data Collected: purchaseDate, supplier, material, quantity (normalized to quantityKg), unit, price, notes.
   Storage: purchases collection (doc adds quantityKg). Side-effects: inventory upsert (raw_<supplierKey> += quantityKg).
   Cross-links: Supplier names from suppliers collection.

3. /daily-processing (DailyProcessing)
   Purpose: Record daily production processing converting raw to finished sub-products.
   Data Collected: processingDate, supplierOfRawMaterial, rawMaterialUsedKg, producedProducts[{ categoryId, subProductId, mode, quantityKg }], totalProducedKg, lossKg, yieldPercent, numMaleWorkers, numFemaleWorkers, dieselGeneratorHours, dieselUsedLiters, hammerChanges, knifeChanges, notes.
   Storage: production collection (per batch). Side-effects: inventory decrement raw_<supplierId>, increment finished_<subProductId>; daily_stats accumulate (totals per date).
   Cross-links: suppliers (raw supplier selection), categories/subProducts (product selection).

4. /daily-analytics (DailyAnalytics)
   Purpose: Tabular & visual view of daily aggregated metrics over a selected date range.
   Data Sources: daily_stats collection (per date doc with totals and yieldPercent, loss, batches, workers, diesel, tool changes). Optionally production for drill-down.
   Metrics: rawUsedKg (totalRawUsedKg), producedKg (totalProducedKg), lossKg, loss%, yield%, hammerChanges, knifeChanges, workers, dieselUsedLiters.
   Cross-links: Link back to /daily-processing for new entries.

5. /inventory (Inventory)
   Purpose: Rich visualization of current inventory (raw + finished) with category and sub-product breakdowns.
   Data Sources: inventory collection docs (raw_* and finished_* naming convention), categories/subProducts, suppliers.
   Derived: rawStockTotal, rawStockPerSupplier, finishedStockPerCategory, finishedStockPerSubProduct, hierarchical category tree.
   Cross-links: /daily-processing (to produce), /raw-material-purchase (to add raw), /management (manage categories/suppliers).

6. /management (Management)
   Purpose: Central administration for Suppliers, Buyers, Product Categories & Sub-Products, Activity Logs (placeholder), Inventory Adjustments (placeholder).
   Data Collected:
     - Suppliers: name, contactPerson, phoneNumber, email, address, defaultBagWeight, defaultUnit.
     - Buyers: name, contactPerson, phoneNumber, email, address.
     - Categories: name.
     - Sub-Products (per category): name, defaultBagWeight, defaultUnit.
     - Adjustments (planned): inventory deltas with reason & notes.
   Storage: suppliers, buyers, categories (+ subProducts subcollection). Adjustments (future: adjustments collection). Logs (future: activity_logs collection auto-generated via cloud functions or client side).
   Cross-links: Used by /daily-processing, /raw-material-purchase, /order-sheet (buyers), /inventory.

7. /order-sheet (OrderSheet)
   Purpose: Create customer sales orders.
   Data Collected: orderDate, customer (buyer) info, deliveryDate, priority, orderItems[{ product, quantity, unit, rate, amount }], totalAmount, notes.
   Storage: (Planned) orders collection (not yet wired). Buyer selection will move from free text to buyers list.
   Side-effects (future): Reserve or deduct finished goods inventory, generate material deduction tasks.
   Cross-links: buyers (management), inventory (available stock), material deduction.

8. /material-deduction (MaterialDeduction) [Planned for merge]
   Purpose: Record deductions (usage/outbound) of inventory either via order reference or direct.
   Data Collected: deductionDate, deductionType, orderSheetRef, materialType, quantity, unit, reason, invoiceNumber, truckNumber, notes.
   Storage: (Planned) deductions collection; side-effects: inventory decrement finished or raw categories.
   Cross-links: order-sheet, inventory.
   Note: To be merged into Management > Adjustments in future.

9. /logs-adjustments (LogsAdjustments) [Legacy placeholder]
   Purpose: UI placeholder for activity logs and manual stock adjustments.
   Status: Being consolidated into Management tabs (Logs & Adjustments). Will retire this standalone page.

10. /inventory-analytics (InventoryAnalytics) [Legacy]
    Purpose: Older analytics prototype replaced by /inventory and /daily-analytics combined views.
    Status: Candidate for removal once parity confirmed.

11. /reports (Reports)
    Purpose: Future space for printable/exportable monthly/quarterly summaries.
    Data Sources: Aggregations from production, purchases, orders, inventory snapshots, daily_stats.

Data Collections Schema Summary
- suppliers: { name, contactPerson, phoneNumber, email, address, defaultBagWeight, defaultUnit, createdAt, updatedAt }
- buyers: { name, contactPerson, phoneNumber, email, address, createdAt, updatedAt }
- categories: { name, createdAt, updatedAt }
  - subProducts (subcollection): { name, defaultBagWeight, defaultUnit, createdAt, updatedAt }
- purchases: { purchaseDate, supplier, material, quantityKg, unit(original), price, notes, createdAt, updatedAt }
- production: { processingDate, supplierOfRawMaterial, rawMaterialUsedKg, producedProducts[{categoryId, subProductId, quantityKg, mode, bagWeight?, bagUnit?}], totalProducedKg, lossKg, yieldPercent, numMaleWorkers, numFemaleWorkers, dieselGeneratorHours, dieselUsedLiters, hammerChanges, knifeChanges, notes, createdAt, updatedAt }
- daily_stats: { date(docId), totalRawUsedKg, totalProducedKg, totalLossKg, batches, hammerChanges, knifeChanges, dieselUsedLiters, workers, yieldPercent, updatedAt }
- inventory: { id (raw_<supplierId>|finished_<subProductId>|raw_unknown), stockKg, updatedAt }
- orders (planned): { orderDate, buyerId, deliveryDate, priority, items[{subProductId, quantityKg, rate, amount}], totalAmount, status, notes, createdAt, updatedAt }
- adjustments (planned): { date, targetId, deltaKg, reason, notes, createdAt, userId }
- deductions (planned if distinct): { orderId?, subProductId?, quantityKg, reason, notes }
- activity_logs (future): { ts, actor, action, entityType, entityId, meta }

Data Flows & Side-effects
- addPurchase: writes purchases -> inventory upsert raw_<supplier> += quantityKg.
- addProduction: writes production -> inventory transaction (raw supplier decrement, finished sub-product increments) + daily_stats accumulate (date-level aggregates).
- inventory adjustments (future): writes adjustments -> inventory delta + log.
- order creation (future): writes orders -> may reserve inventory; on fulfillment triggers inventory deduction & log.

Cross-Page Dependencies
- Management supplies master data (suppliers, buyers, categories/subProducts) used by: purchases, production, orders, inventory display.
- Production impacts: inventory, daily_stats (used by dashboard/daily analytics), future reports.
- Purchases impacts: inventory (raw), dashboard KPIs.
- Inventory page consumes: inventory + categories/subProducts + suppliers to build hierarchy.
- DailyAnalytics consumes: daily_stats (populated by production submissions).
- Dashboard consumes: daily_stats + inventory + production (recent) + purchases (recent) + categories/subProducts.

Validation Checklist (Post-Deployment)
1. Submit new production entry -> production doc fields (rawMaterialUsedKg, totalProducedKg, lossKg, yieldPercent) present; daily_stats doc for date updated; inventory raw_<supplierId> decreased; finished_<subProductId> increased.
2. Submit raw purchase -> purchases doc created; inventory raw_<supplierId> increased by quantityKg.
3. Inventory page refresh -> reflects new quantities (raw & finished changes) consistently.
4. DailyAnalytics for date range including new entry -> row shows updated rawUsedKg / producedKg / yield% / loss%.
5. Management: add/edit/delete supplier/buyer/category/sub-product persists and reflected in dependent forms (purchase & production category/sub-product selectors) after refresh.
6. Deleting category removes its subProducts.
7. Performance: Inventory and Dashboard load under acceptable time (<1.5s typical).

Planned Cleanup / Decommission
- Remove pages: logs-adjustments, inventory-analytics after integrating features.
- Merge material-deduction into management adjustments tab with proper Firestore schema.

Proposed Improvements (Roadmap)
A. Data Integrity & Consistency
- Add Firestore composite indexes for queries on date ranges (daily_stats.date) and future order filters.
- Introduce serverTimestamp fields consistently for createdAt/updatedAt across all writes.
- Implement idempotent production submissions (check hash of batch before duplicate write).
- Add soft delete flag (isDeleted) instead of hard delete for suppliers/categories to preserve historical links.

B. Inventory & Orders
- Implement reservations for orders (orders.reserveKg) before fulfillment to avoid double allocation.
- Add periodic inventory snapshot collection for historical trending (inventory_snapshots daily at midnight UTC).
- Introduce minimum stock thresholds per subProduct & supplier; surface low-stock alerts on dashboard.

C. Performance
- Cache master data (suppliers, categories, buyers) in localStorage with version stamp; add invalidate endpoint (manual refresh button already present).
- Lazy-load heavy chart modules (dynamic import for Recharts) to cut initial bundle.
- Use Firestore listen (onSnapshot) for inventory & daily_stats for real-time dashboard (optional toggle).

D. UX / UI
- Consolidate legacy pages; remove obsolete route files once merged.
- Add universal toast feedback (success, error) for CRUD actions.
- Provide inline form validation (required, numeric ranges, positive values).
- Mobile refinements: reduce chart complexity; show simplified metrics list.

E. Analytics Enhancements
- Trend smoothing (7-day moving averages) for yield & loss graphs.
- Loss root cause tagging (choose reason on production form when lossKg > threshold).
- Tool wear efficiency metric: kg processed per hammer/knife change; display rolling average.
- Diesel efficiency: producedKg per liter; highlight drop anomalies.

F. Security & Audit
- Tighten security rules: principle of least privilege (restrict updates by field & path validation).
- Add activity_logs generation client-side (or via Cloud Functions) for critical actions (inventory adjustment, order fulfillment, deletion).
- Partition rules for buyers vs suppliers if user roles added later.

G. Reliability & Monitoring
- Add offline queue for writes when connection lost (persist unsent production/purchase locally).
- Implement error reporting (e.g., Sentry) for production build.
- Add health/status panel: last sync time, pending offline operations.

H. Testing
- Unit tests for normalization utilities (unit->kg), yield calculations, inventory applyProduction logic.
- Integration tests using a Firestore emulator for addProduction / addPurchase flows.
- Visual regression snapshots for key dashboards (Chromatic / Storybook optional setup).

I. Documentation & DevOps
- Add .env.example clarifying required Firebase keys.
- Provide yarn/npm script for seeding sample data (optional dev environment convenience).
- CI pipeline: lint, test, build, deploy preview.
- Scheduled backup instructions for Firestore (export via gcloud or manual weekly export script).

J. Accessibility & Internationalization
- Add aria-labels on icon-only buttons (hamburger, refresh).
- Ensure color contrast passes WCAG AA for text & chart colors.
- Internationalization scaffold (i18n keys) for potential multi-language support.

K. Future Features (Stretch)
- Order fulfillment workflow with picking list and automatic deduction.
- Cost analytics: average raw cost per kg vs finished product yield to compute conversion efficiency.
- Predictive low-stock forecasting (simple linear regression on consumption rate).
- Export CSV/PDF for daily analytics & inventory snapshots.

Improvement Validation Steps
- After implementing a feature above, append a test scenario referencing Validation Checklist numbering.
- Add changelog entries summarizing new metrics or schema fields.

End of report.
