rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() { return request.auth != null; }
  // Helper to ensure a field exists and is a string
  function hasStringField(field) { return request.resource.data.keys().hasAll([field]) && request.resource.data[field] is string && request.resource.data[field].size() > 0; }
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAuthed();
      match /subProducts/{subId} {
        allow read: if true;
        allow write: if isAuthed();
      }
    }
    match /suppliers/{docId} { allow read: if true; allow write: if isAuthed(); }
    match /orders/{docId} { allow read: if isAuthed(); allow write: if isAuthed(); }
    match /production/{docId} { allow read: if isAuthed(); allow write: if isAuthed(); }
    // Purchases must include a valid supplierId reference
    // Note: Firestore rules cannot check existence across collections reliably without get() on documents.
    // We enforce presence of supplierId here, and existence in application code.
    match /purchases/{docId} {
      allow read: if isAuthed();
      allow create: if isAuthed() && hasStringField('supplierId');
      allow update: if isAuthed() && (!('supplierId' in request.resource.data) || hasStringField('supplierId'));
      allow delete: if isAuthed();
    }
    match /inventory/{docId} { allow read: if isAuthed(); allow write: if isAuthed(); }
    match /daily_stats/{docId} {
      allow read, write: if request.auth != null;
    }
  }
}
